_id: spc_7f0051de6557471baaee7fdc4d9c0a81
type: ApiSpec
parentId: wrk_b084de0cdb4b4710bd50223957014013
modified: 1671466124733
created: 1668302615245
fileName: pda-api
contents: |
  openapi: 3.0.3
  info:
    version: 1.0.0
    title: PDA API
    description: 'This is a simple ACL API built with NestJS'
    contact:
      name: Maia
      email: gabrielmaialva33@gmail.com
      url: github.com/gabrielmaialva33
  servers:
    - url: http://127.0.0.1:3333
      description: Local server
    - url: http://127.0.0.1:3000
      description: Docker server
    - url: https://pda.os.api.mrootx.xyz
      description: Azure server
    - url: https://pda-os-api.azurewebsites.net
      description: Azure Web App
  tags:
    - name: Auth
      description: Operations about auth
    - name: User
      description: Operations about users
    - name: Role
      description: Operations about roles
    - name: Collaborator
      description: Operations about collaborators
    - name: Client
      description: Operations about clients
    - name: Phone
      description: Operations about phones
    - name: Address
      description: Operations about addresses

  paths:
    /sign_in:
      post:
        tags:
          - Auth
        summary: Sign in
        description: Use to sign in
        operationId: signIn
        requestBody:
          description: User object that needs to be signed in
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignIn'
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid input
          '401':
            description: Unauthorized

    /users:
      get:
        tags:
          - User
        summary: List users
        description: Use to request all users
        operationId: GetAllUsers
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of users per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      post:
        tags:
          - User
        summary: Store user
        description: Use to create a user
        operationId: StoreUser
        security:
          - bearerToken: [ ]
        requestBody:
          description: User object that needs to be added to the store
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreUser'
        responses:
          '201':
            description: User created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid input
    /users/{userId}:
      get:
        tags:
          - User
        summary: Get user
        description: Use to request a user
        operationId: GetUser
        parameters:
          - name: userId
            in: path
            description: ID of user to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: User not found
      put:
        tags:
          - User
        summary: Edit user
        description: Use to edit a user
        operationId: EditUser
        parameters:
          - name: userId
            in: path
            description: ID of user to update
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        requestBody:
          description: User object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUser'
        responses:
          '200':
            description: User updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid input
          '404':
            description: User not found
      delete:
        tags:
          - User
        summary: Delete user
        description: Use to delete a user
        operationId: DeleteUser
        parameters:
          - name: userId
            in: path
            description: ID of user to delete
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: User deleted
          '404':
            description: User not found

    /roles:
      get:
        tags:
          - Role
        summary: List roles
        description: Use to request all roles
        operationId: GetAllRoles
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of roles per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
    /roles/{roleId}:
      get:
        tags:
          - Role
        summary: Get role
        description: Use to request a role
        operationId: GetRole
        parameters:
          - name: roleId
            in: path
            description: ID of role to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Role'
          '404':
            description: Role not found

    /collaborators:
      get:
        tags:
          - Collaborator
        summary: List collaborators
        description: Use to request all collaborators
        operationId: GetAllCollaborators
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of collaborators per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Collaborator'
      post:
        tags:
          - Collaborator
        summary: Store collaborator
        description: Use to create a collaborator
        operationId: StoreCollaborator
        security:
          - bearerToken: [ ]
        requestBody:
          description: Collaborator object that needs to be added to the store
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCollaborator'
        responses:
          '201':
            description: Collaborator created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Collaborator'
          '400':
            description: Invalid input
    /collaborators/{collaboratorId}:
      get:
        tags:
          - Collaborator
        summary: Get collaborator
        description: Use to request a collaborator
        operationId: GetCollaborator
        parameters:
          - name: collaboratorId
            in: path
            description: ID of collaborator to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Collaborator'
          '404':
            description: Collaborator not found
      put:
        tags:
          - Collaborator
        summary: Edit collaborator
        description: Use to edit a collaborator
        operationId: EditCollaborator
        parameters:
          - name: collaboratorId
            in: path
            description: ID of collaborator to update
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        requestBody:
          description: Collaborator object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCollaborator'
        responses:
          '200':
            description: Collaborator updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Collaborator'
          '400':
            description: Invalid input
          '404':
            description: Collaborator not found
      delete:
        tags:
          - Collaborator
        summary: Delete collaborator
        description: Use to delete a collaborator
        operationId: DeleteCollaborator
        parameters:
          - name: collaboratorId
            in: path
            description: ID of collaborator to delete
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: Collaborator deleted
          '404':
            description: Collaborator not found

    /clients:
      get:
        tags:
          - Client
        summary: List clients
        description: Use to request all clients
        operationId: GetAllClients
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of clients per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Client'
      post:
        tags:
          - Client
        summary: Store client
        description: Use to create a client
        operationId: StoreClient
        security:
          - bearerToken: [ ]
        requestBody:
          description: Client object that needs to be added to the store
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreClient'
        responses:
          '201':
            description: Client created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Client'
          '400':
            description: Invalid input
    /clients/{clientId}:
      get:
        tags:
          - Client
        summary: Get client
        description: Use to request a client
        operationId: GetClient
        parameters:
          - name: clientId
            in: path
            description: ID of client to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Client'
          '404':
            description: Client not found
      put:
        tags:
          - Client
        summary: Edit client
        description: Use to edit a client
        operationId: EditClient
        parameters:
          - name: clientId
            in: path
            description: ID of client to update
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        requestBody:
          description: Client object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreClient'
        responses:
          '200':
            description: Client updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Client'
          '400':
            description: Invalid input
          '404':
            description: Client not found
      delete:
        tags:
          - Client
        summary: Delete client
        description: Use to delete a client
        operationId: DeleteClient
        parameters:
          - name: clientId
            in: path
            description: ID of client to delete
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: Client deleted
          '404':
            description: Client not found

    /phones:
      get:
        tags:
          - Phone
        summary: List phones
        description: Use to request all phones
        operationId: GetAllPhones
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of phones per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Phone'
      post:
        tags:
          - Phone
        summary: Store phone
        description: Use to create a phone
        operationId: StorePhone
        security:
          - bearerToken: [ ]
        requestBody:
          description: Phone object that needs to be added to the store
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorePhone'
        responses:
          '201':
            description: Phone created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Phone'
          '400':
            description: Invalid input
    /phones/{phoneId}:
      get:
        tags:
          - Phone
        summary: Get phone
        description: Use to request a phone
        operationId: GetPhone
        parameters:
          - name: phoneId
            in: path
            description: ID of phone to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Phone'
          '404':
            description: Phone not found
      put:
        tags:
          - Phone
        summary: Edit phone
        description: Use to edit a phone
        operationId: EditPhone
        parameters:
          - name: phoneId
            in: path
            description: ID of phone to update
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        requestBody:
          description: Phone object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorePhone'
        responses:
          '200':
            description: Phone updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Phone'
          '400':
            description: Invalid input
          '404':
            description: Phone not found
      delete:
        tags:
          - Phone
        summary: Delete phone
        description: Use to delete a phone
        operationId: DeletePhone
        parameters:
          - name: phoneId
            in: path
            description: ID of phone to delete
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: Phone deleted
          '404':
            description: Phone not found

    /addresses:
      get:
        tags:
          - Address
        summary: List addresses
        description: Use to request all addresses
        operationId: GetAllAddresses
        parameters:
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Page number
          - in: query
            name: per_page
            schema:
              type: integer
              default: 10
            description: Number of addresses per page
          - in: query
            name: search
            schema:
              type: string
              example: 'John'
            description: Search by public fields
          - in: query
            name: sort
            schema:
              type: string
              default: id
            description: Sort by field
          - in: query
            name: order
            schema:
              type: string
              default: asc
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Address'
      post:
        tags:
          - Address
        summary: Store address
        description: Use to create an address
        operationId: StoreAddress
        security:
          - bearerToken: [ ]
        requestBody:
          description: Address object that needs to be added to the store
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreAddress'
        responses:
          '201':
            description: Address created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Address'
          '400':
            description: Invalid input
    /addresses/{addressId}:
      get:
        tags:
          - Address
        summary: Get address
        description: Use to request an address
        operationId: GetAddress
        parameters:
          - name: addressId
            in: path
            description: ID of address to return
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: A successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Address'
          '404':
            description: Address not found
      put:
        tags:
          - Address
        summary: Edit address
        description: Use to edit an address
        operationId: EditAddress
        parameters:
          - name: addressId
            in: path
            description: ID of address to update
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        requestBody:
          description: Address object that needs to be updated
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreAddress'
        responses:
          '200':
            description: Address updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Address'
          '400':
            description: Invalid input
          '404':
            description: Address not found
      delete:
        tags:
          - Address
        summary: Delete address
        description: Use to delete an address
        operationId: DeleteAddress
        parameters:
          - name: addressId
            in: path
            description: ID of address to delete
            required: true
            schema:
              type: string
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: Address deleted
          '404':
            description: Address not found
  components:
    securitySchemes:
      bearerToken:
        type: http
        scheme: bearer
        bearerFormat: JWT
    schemas:
      ## schemas can be referenced from a response or parameter in a path
      # auth schemas
      SignIn:
        type: object
        properties:
          uid:
            type: string
            example: 'admin'
          password:
            type: string
            example: 'Pda@551238'
        required:
          - uid
          - password
        example:
          uid: 'admin'
          password: 'Pda@551238'

      # user schemas
      User:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: 961d77f4-458c-4add-b419-ba70f1b18297
          first_name:
            type: string
            example: John
          last_name:
            type: string
            example: Doe
          email:
            type: string
            example: john@pda.com
          user_name:
            type: string
            example: john
          password:
            type: string
            example: 'Pda@551238'
          is_online:
            type: boolean
            example: false
          avatar:
            type: string
            example: 'https://avatars.githubusercontent.com/u/26732067?v=4'
          roles:
            type: array
            items:
              $ref: '#/components/schemas/Role'
        required:
          - first_name
          - last_name
          - email
          - user_name
          - password
        example:
          id: 961d77f4-458c-4add-b419-ba70f1b18297
          first_name: John
          last_name: Doe
          email: john@pda.com
          user_name: john
          password: 'Pda@551238'
          is_online: false
          code: '22108253'
          phone: '(15) 99660-1742'
          cpf: '387.387.348-69'
      StoreUser:
        type: object
        properties:
          first_name:
            type: string
            example: John
          last_name:
            type: string
            example: Doe
          email:
            type: string
            example: john@pda.com
          user_name:
            type: string
            example: john
          password:
            type: string
            example: 'Pda@551238'
          colaborator:
            $ref: '#/components/schemas/StoreCollaborator'
          role:
            type: string
            example: 'admin'
        required:
          - first_name
          - last_name
          - email
          - user_name
          - password
          - role
        example:
          first_name: John
          last_name: Doe
          email: john@pda.com
          user_name: john
          password: 'Pda@551238'
          role: 'user'
      EditUser:
        type: object
        properties:
          first_name:
            type: string
            example: John
          last_name:
            type: string
            example: Doe
          email:
            type: string
            example: john@pda.com
          user_name:
            type: string
            example: john
          password:
            type: string
            example: 'Pda@551238'
          colaborator:
            $ref: '#/components/schemas/StoreCollaborator'
          role:
            type: string
            example: 'admin'
        example:
          first_name: John
          last_name: Doe
          email: john@pda.com
          user_name: john
          password: 'Pda@551238'
          role: 'user'

      # role schemas
      Role:
        properties:
          id:
            type: string
            format: uuid
            example: 2885a01e-565e-4dec-8aa3-1f550acd8427
          slug:
            type: string
            example: USER
          description:
            type: string
            example: 'An common user'
        required:
          - slug
          - description
        example:
          id: 948b0353-0bd4-4cfe-a443-f3204a91c86c
          slug: USER
          description: 'An common user'

      # collaborator schemas
      Collaborator:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: 792b6982-61f8-444b-ad0f-45ae7924fb07
          code:
            type: string
            example: '22108253'
          cpf:
            type: string
            example: '387.387.344-21'
          rg:
            type: string
            example: '58.912.123-1'
          birth_date:
            type: string
            format: date
            example: '1998-01-01'
          job:
            type: string
            example: 'Developer'
          sex:
            type: string
            example: 'male'
          work_type:
            type: string
            example: 'clt'
          status:
            type: string
            example: 'active'
          civil_status:
            type: string
            example: 'single'
          note:
            type: string
            example: 'A good developer'
          phones:
            type: array
            items:
              $ref: '#/components/schemas/Phone'
          addresses:
            type: array
            items:
              $ref: '#/components/schemas/Address'
          bank:
            type: object
            properties:
              name:
                type: string
                example: 'Itaú'
              agency:
                type: string
                example: '1234'
              account:
                type: string
                example: '123456'
              pix:
                type: string
                example: 'john@pda.com.br'
          user_id:
            type: string
            format: uuid
            example: d40fdca1-5e38-4052-a3f3-0799bac39a48
        example:
          id: 0e10fdf0-bddd-45f5-9dc0-71966af963c8
          code: '22108253'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          job: 'Developer'
          sex: 'male'
          work_type: 'clt'
          status: 'active'
          civil_status: 'single'
          description: 'A good developer'
          phones:
            - id: e051d2a5-3c22-481a-a175-8c59942c0c0e
              phone: '(15) 99660-1742'
              type: 'mobile'
            - id: f2cad45f-b954-481f-98ca-fe76bec77ad5
              phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - id: 1c0b0b9a-1b9a-4b0f-8b1f-1b9a4b0f8b1f
              street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - id: 2c0b0b9a-1b9a-4b0f-8b1f-1b9a4b0f8b1f
              street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
          bank:
            name: 'Itaú'
            agency: '1234'
            account: '123456'
            pix: 'john@pda.com.br'
          user_id: 8dd0c5a6-a4f0-4189-8cb0-2852fb876a23
      StoreCollaborator:
        type: object
        properties:
          code:
            type: string
            example: '22108253'
          cpf:
            type: string
            example: '387.387.344-21'
          rg:
            type: string
            example: '58.912.123-1'
          birth_date:
            type: string
            format: date
            example: '1998-01-01'
          job:
            type: string
            example: 'Developer'
          sex:
            type: string
            example: 'male'
          work_type:
            type: string
            example: 'clt'
          status:
            type: string
            example: 'active'
          civil_status:
            type: string
            example: 'single'
          note:
            type: string
            example: 'A good developer'
          phones:
            type: array
            items:
              $ref: '#/components/schemas/Phone'
          addresses:
            type: array
            items:
              $ref: '#/components/schemas/Address'
          bank:
            type: object
            properties:
              name:
                type: string
                example: 'Itaú'
              agency:
                type: string
                example: '1234'
              account:
                type: string
                example: '123456'
              pix:
                type: string
                example: 'john@pda.com.br'
          user:
            type: object
            properties:
              first_name:
                type: string
                example: John
              last_name:
                type: string
                example: Doe
              email:
                type: string
                example: john@pda.com
              user_name:
                type: string
                example: john
              password:
                type: string
                example: 'Pda@551238'
        example:
          code: '22108253'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          job: 'Developer'
          sex: 'male'
          work_type: 'clt'
          status: 'active'
          civil_status: 'single'
          note: 'A good developer'
          phones:
            - phone: '(15) 99660-1742'
              type: 'home'
            - phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
          bank:
            name: 'Itaú'
            agency: '1234'
            account: '123456'
            pix: 'john@pda.com.br'
          user:
            first_name: John
            last_name: Doe
            email: john@pda.com
            user_name: john
            password: 'Pda@551238'

      # phone schemas
      Phone:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
          phone:
            type: string
            example: '(15) 99660-1742'
          type:
            type: string
            example: 'mobile'
        example:
          id: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
          phone: '(15) 99660-1742'
          type: 'mobile'
      StorePhone:
        type: object
        properties:
          phone:
            type: string
            example: '(15) 99660-1742'
          type:
            type: string
            example: 'home'
        example:
          phone: '(15) 99660-1742'
          type: 'home'

      # address schemas
      Address:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
          street:
            type: string
            example: 'Rua 1'
          number:
            type: string
            example: '123'
          complement:
            type: string
            example: 'Casa 1'
          neighborhood:
            type: string
            example: 'Centro'
          city:
            type: string
            example: 'São Paulo'
          state:
            type: string
            example: 'SP'
          zip_code:
            type: string
            example: '12345-678'
        example:
          id: 8822ab54-950e-4204-adba-a43fcb2903b0
          street: 'Rua 1'
          number: '123'
          complement: 'Casa 1'
          neighborhood: 'Centro'
          city: 'São Paulo'
          state: 'SP'
          zip_code: '12345-678'
      StoreAddress:
        type: object
        properties:
          street:
            type: string
            example: 'Rua 1'
          number:
            type: string
            example: '1'
          complement:
            type: string
            example: 'Casa 1'
          neighborhood:
            type: string
            example: 'Bairro 1'
          city:
            type: string
            example: 'São Paulo'
          state:
            type: string
            example: 'SP'
          zip_code:
            type: string
            example: '12345-678'
        example:
          street: 'Rua 1'
          number: '1'
          complement: 'Casa 1'
          neighborhood: 'Bairro 1'
          city: 'São Paulo'
          state: 'SP'
          zip_code: '12345-678'

      # client schemas
      Client:
        description: 'Client schema'
        type: object
        properties:
          full_name:
            type: string
            example: 'John Doe'
          cpf:
            type: string
            example: '387.387.344-21'
          rg:
            type: string
            example: '58.912.123-1'
          birth_date:
            type: string
            format: date
            example: '1998-01-01'
          phones:
            type: array
            items:
              $ref: '#/components/schemas/Phone'
          addresses:
            type: array
            items:
              $ref: '#/components/schemas/Address'
        example:
          full_name: 'John Doe'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          phones:
            - id: e051d2a5-3c22-481a-a175-8c59942c0c0e
              phone: '(15) 99660-1742'
              type: 'mobile'
            - id: f2cad45f-b954-481f-98ca-fe76bec77ad5
              phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - id: 20d9704a-5f5c-4f72-bfc8-ac77727fd4f9
              street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - id: 577a9251-a381-4216-b8cd-750d621f38d5
              street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
      StoreClient:
        description: 'Store client schema'
        type: object
        properties:
          full_name:
            type: string
            example: 'John Doe'
          cpf:
            type: string
            example: '387.387.344-21'
          rg:
            type: string
            example: '58.912.123-1'
          birth_date:
            type: string
            format: date
            example: '1998-01-01'
          phones:
            type: array
            items:
              $ref: '#/components/schemas/StorePhone'
          addresses:
            type: array
            items:
              $ref: '#/components/schemas/StoreAddress'
        example:
          full_name: 'John Doe'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          phones:
            - phone: '(15) 99660-1742'
              type: 'home'
            - phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
contentType: yaml
