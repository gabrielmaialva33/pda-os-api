openapi: 3.0.3
info:
  version: 1.0.0
  title: PDA API
  description: 'This is a simple ACL API built with NestJS'
  contact:
    name: Maia
    email: gabrielmaialva33@gmail.com
    url: github.com/gabrielmaialva33
servers:
  - url: http://127.0.0.1:3333
    description: Local server
  - url: http://127.0.0.1:3000
    description: Docker server
  - url: https://pda.os.api.mrootx.xyz/
    description: Azure server
  - url: https://pda-os-api.azurewebsites.net/
    description: Azure Web App
tags:
  - name: Auth
    description: Operations about auth
  - name: User
    description: Operations about users
  - name: Role
    description: Operations about roles
  - name: Collaborator
    description: Operations about collaborators


paths:
  /sign_in:
    post:
      tags:
        - Auth
      summary: Sign in
      description: Use to sign in
      requestBody:
        description: User object that needs to be signed in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /users:
    get:
      tags:
        - User
      summary: List users
      description: Use to request all users
      operationId: GetAllUsers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of users per page
        - in: query
          name: search
          schema:
            type: string
            example: 'John'
          description: Search by public fields
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort by field
        - in: query
          name: direction
          schema:
            type: string
            default: asc
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Store user
      description: Use to create a user
      operationId: StoreUser
      security:
        - bearerToken: [ ]
      requestBody:
        description: User object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUser'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user
      description: Use to request a user
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Edit user
      description: Use to edit a user
      operationId: EditUser
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUser'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user
      description: Use to delete a user
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /roles:
    get:
      tags:
        - Role
      summary: List roles
      description: Use to request all roles
      operationId: GetAllRoles
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of roles per page
        - in: query
          name: search
          schema:
            type: string
            example: 'John'
          description: Search by public fields
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort by field
        - in: query
          name: direction
          schema:
            type: string
            default: asc
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - Role
      summary: Store role
      description: Use to create a role
      operationId: StoreRole
      security:
        - bearerToken: [ ]
      requestBody:
        description: Role object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreRole'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
  /roles/{roleId}:
    get:
      tags:
        - Role
      summary: Get role
      description: Use to request a role
      operationId: GetRole
      parameters:
        - name: roleId
          in: path
          description: ID of role to return
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Role not found
    put:
      tags:
        - Role
      summary: Edit role
      description: Use to edit a role
      operationId: EditRole
      parameters:
        - name: roleId
          in: path
          description: ID of role to update
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      requestBody:
        description: Role object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRole'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
        '404':
          description: Role not found
    delete:
      tags:
        - Role
      summary: Delete role
      description: Use to delete a role
      operationId: DeleteRole
      parameters:
        - name: roleId
          in: path
          description: ID of role to delete
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '204':
          description: Role deleted
        '404':
          description: Role not found

  /collaborators:
    get:
      tags:
        - Collaborator
      summary: List collaborators
      description: Use to request all collaborators
      operationId: GetAllCollaborators
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of collaborators per page
        - in: query
          name: search
          schema:
            type: string
            example: 'John'
          description: Search by public fields
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort by field
        - in: query
          name: direction
          schema:
            type: string
            default: asc
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaborator'
    post:
      tags:
        - Collaborator
      summary: Store collaborator
      description: Use to create a collaborator
      operationId: StoreCollaborator
      security:
        - bearerToken: [ ]
      requestBody:
        description: Collaborator object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCollaborator'
      responses:
        '201':
          description: Collaborator created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
        '400':
          description: Invalid input
  /collaborators/{collaboratorId}:
    get:
      tags:
        - Collaborator
      summary: Get collaborator
      description: Use to request a collaborator
      operationId: GetCollaborator
      parameters:
        - name: collaboratorId
          in: path
          description: ID of collaborator to return
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
        '404':
          description: Collaborator not found
    put:
      tags:
        - Collaborator
      summary: Edit collaborator
      description: Use to edit a collaborator
      operationId: EditCollaborator
      parameters:
        - name: collaboratorId
          in: path
          description: ID of collaborator to update
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      requestBody:
        description: Collaborator object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCollaborator'
      responses:
        '200':
          description: Collaborator updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
        '400':
          description: Invalid input
        '404':
          description: Collaborator not found
    delete:
      tags:
        - Collaborator
      summary: Delete collaborator
      description: Use to delete a collaborator
      operationId: DeleteCollaborator
      parameters:
        - name: collaboratorId
          in: path
          description: ID of collaborator to delete
          required: true
          schema:
            type: string
      security:
        - bearerToken: [ ]
      responses:
        '204':
          description: Collaborator deleted
        '404':
          description: Collaborator not found

components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '200':
      description: OK
    '401':
      description: Unauthorized
    '422':
      description: Unprocessable Entity
    '404':
      description: Not Found
  schemas:
    ## schemas can be referenced from a response or parameter in a path
    # auth schemas
    SignIn:
      type: object
      properties:
        uid:
          type: string
          example: 'admin'
        password:
          type: string
          example: 'Pda@551238'
      required:
        - uid
        - password
      example:
        uid: 'admin'
        password: 'Pda@551238'
    # user schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 961d77f4-458c-4add-b419-ba70f1b18297
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@pda.com
        user_name:
          type: string
          example: john
        password:
          type: string
          example: 'Pda@551238'
        is_online:
          type: boolean
          example: false
        avatar:
          type: string
          example: 'https://avatars.githubusercontent.com/u/26732067?v=4'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - first_name
        - last_name
        - email
        - user_name
        - password
      example:
        id: 961d77f4-458c-4add-b419-ba70f1b18297
        first_name: John
        last_name: Doe
        email: john@pda.com
        user_name: john
        password: 'Pda@551238'
        is_online: false
        code: '22108253'
        phone: '(15) 99660-1742'
        cpf: '387.387.348-69'
    StoreUser:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@pda.com
        user_name:
          type: string
          example: john
        password:
          type: string
          example: 'Pda@551238'
        colaborator:
          $ref: '#/components/schemas/StoreCollaborator'
        roles:
          type: array
          items:
            format: uuid
            example: 07360612-1006-43d8-b934-4c5722d84884
      required:
        - first_name
        - last_name
        - email
        - user_name
        - password
        - roles
      example:
        first_name: John
        last_name: Doe
        email: john@pda.com
        user_name: john
        password: 'Pda@551238'
        roles:
          - c366318e-d205-41bb-8e7e-ad15827c61bb
          - 634efc35-3060-4996-b309-571748e66a4f
        collaborator:
          code: '22108253'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          job: 'Developer'
          sex: 'male'
          work_type: 'clt'
          status: 'active'
          civil_status: 'single'
          description: 'A good developer'
          phones:
            - phone: '(15) 99660-1742'
              type: 'mobile'
            - phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
    EditUser:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@pda.com
        user_name:
          type: string
          example: john
        password:
          type: string
          example: 'Pda@551238'
        colaborator:
          $ref: '#/components/schemas/StoreCollaborator'
        roles:
          type: array
          items:
            format: uuid
            example: 4b2b6ec4-6946-4b27-9dec-28b5b328f145
      example:
        first_name: John
        last_name: Doe
        email: john@pda.com
        user_name: john
        password: 'Pda@551238'
        roles:
          - 73b01c16-e22e-43ca-857e-85fcac45c80c
          - 5b1a65dc-f0d2-4e16-91cf-9a9c62d62d1d
        collaborator:
          code: '22108253'
          cpf: '387.387.344-21'
          rg: '58.912.123-1'
          birth_date: '1998-01-01'
          job: 'Developer'
          sex: 'male'
          work_type: 'clt'
          status: 'active'
          civil_status: 'single'
          description: 'A good developer'
          phones:
            - phone: '(15) 99660-1742'
              type: 'mobile'
            - phone: '(15) 99660-1742'
              type: 'work'
          addresses:
            - street: 'Rua 1'
              number: '1'
              complement: 'Casa 1'
              neighborhood: 'Bairro 1'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
            - street: 'Rua 2'
              number: '2'
              complement: 'Casa 2'
              neighborhood: 'Bairro 2'
              city: 'São Paulo'
              state: 'SP'
              country: 'Brasil'
              zip_code: '12345-678'
    # role schemas
    Role:
      properties:
        id:
          type: string
          format: uuid
          example: 2885a01e-565e-4dec-8aa3-1f550acd8427
        slug:
          type: string
          example: USER
        description:
          type: string
          example: 'An common user'
      required:
        - slug
        - description
      example:
        id: 948b0353-0bd4-4cfe-a443-f3204a91c86c
        slug: USER
        description: 'An common user'
    StoreRole:
      type: object
      properties:
        slug:
          type: string
          example: USER
        description:
          type: string
          example: 'An common user'
      required:
        - slug
        - description
      example:
        slug: USER
        description: 'An common user'
    EditRole:
      type: object
      properties:
        slug:
          type: string
          example: USER
        description:
          type: string
          example: 'An common user'
      example:
        slug: USER
        description: 'An common user'
    # collaborator schemas
    Collaborator:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 792b6982-61f8-444b-ad0f-45ae7924fb07
        code:
          type: string
          example: '22108253'
        cpf:
          type: string
          example: '387.387.344-21'
        rg:
          type: string
          example: '58.912.123-1'
        birth_date:
          type: string
          format: date
          example: '1998-01-01'
        job:
          type: string
          example: 'Developer'
        sex:
          type: string
          example: 'male'
        work_type:
          type: string
          example: 'clt'
        status:
          type: string
          example: 'active'
        civil_status:
          type: string
          example: 'single'
        description:
          type: string
          example: 'A good developer'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        bank:
          type: object
          properties:
            name:
              type: string
              example: 'Itaú'
            agency:
              type: string
              example: '1234'
            account:
              type: string
              example: '123456'
            pix:
              type: string
              example: 'john@pda.com.br'
        user_id:
          type: string
          format: uuid
          example: d40fdca1-5e38-4052-a3f3-0799bac39a48
      example:
        id: 0e10fdf0-bddd-45f5-9dc0-71966af963c8
        code: '22108253'
        cpf: '387.387.344-21'
        rg: '58.912.123-1'
        birth_date: '1998-01-01'
        job: 'Developer'
        sex: 'male'
        work_type: 'clt'
        status: 'active'
        civil_status: 'single'
        description: 'A good developer'
        phones:
          - id: e051d2a5-3c22-481a-a175-8c59942c0c0e
            phone: '(15) 99660-1742'
            type: 'mobile'
          - id: f2cad45f-b954-481f-98ca-fe76bec77ad5
            phone: '(15) 99660-1742'
            type: 'work'
        addresses:
          - id: 1c0b0b9a-1b9a-4b0f-8b1f-1b9a4b0f8b1f
            street: 'Rua 1'
            number: '1'
            complement: 'Casa 1'
            neighborhood: 'Bairro 1'
            city: 'São Paulo'
            state: 'SP'
            country: 'Brasil'
            zip_code: '12345-678'
          - id: 2c0b0b9a-1b9a-4b0f-8b1f-1b9a4b0f8b1f
            street: 'Rua 2'
            number: '2'
            complement: 'Casa 2'
            neighborhood: 'Bairro 2'
            city: 'São Paulo'
            state: 'SP'
            country: 'Brasil'
            zip_code: '12345-678'
        bank:
          name: 'Itaú'
          agency: '1234'
          account: '123456'
          pix: 'john@pda.com.br'
        user_id: 8dd0c5a6-a4f0-4189-8cb0-2852fb876a23
    StoreCollaborator:
      type: object
      properties:
        code:
          type: string
          example: '22108253'
        cpf:
          type: string
          example: '387.387.344-21'
        rg:
          type: string
          example: '58.912.123-1'
        birth_date:
          type: string
          format: date
          example: '1998-01-01'
        job:
          type: string
          example: 'Developer'
        sex:
          type: string
          example: 'male'
        work_type:
          type: string
          example: 'clt'
        status:
          type: string
          example: 'active'
        civil_status:
          type: string
          example: 'single'
        description:
          type: string
          example: 'A good developer'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        bank:
          type: object
          properties:
            name:
              type: string
              example: 'Itaú'
            agency:
              type: string
              example: '1234'
            account:
              type: string
              example: '123456'
            pix:
              type: string
              example: 'john@pda.com.br'
        user:
          type: object
          properties:
            first_name:
              type: string
              example: John
            last_name:
              type: string
              example: Doe
            email:
              type: string
              example: john@pda.com
            user_name:
              type: string
              example: john
            password:
              type: string
              example: 'Pda@551238'
      example:
        code: '22108253'
        cpf: '387.387.344-21'
        rg: '58.912.123-1'
        birth_date: '1998-01-01'
        job: 'Developer'
        sex: 'male'
        work_type: 'clt'
        status: 'active'
        civil_status: 'single'
        description: 'A good developer'
        phones:
          - phone: '(15) 99660-1742'
            type: 'home'
          - phone: '(15) 99660-1742'
            type: 'work'
        addresses:
          - street: 'Rua 1'
            number: '1'
            complement: 'Casa 1'
            neighborhood: 'Bairro 1'
            city: 'São Paulo'
            state: 'SP'
            country: 'Brasil'
            zip_code: '12345-678'
          - street: 'Rua 2'
            number: '2'
            complement: 'Casa 2'
            neighborhood: 'Bairro 2'
            city: 'São Paulo'
            state: 'SP'
            country: 'Brasil'
            zip_code: '12345-678'
        bank:
          name: 'Itaú'
          agency: '1234'
          account: '123456'
          pix: 'john@pda.com.br'
        user:
          first_name: John
          last_name: Doe
          email: john@pda.com
          user_name: john
          password: 'Pda@551238'
    # phone schemas
    Phone:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
        phone:
          type: string
          example: '(15) 99660-1742'
        type:
          type: string
          example: 'mobile'
      example:
        id: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
        phone: '(15) 99660-1742'
        type: 'mobile'
    StorePhone:
      type: object
      properties:
        phone:
          type: string
          example: '(15) 99660-1742'
        type:
          type: string
          example: 'home'
      example:
        phone: '(15) 99660-1742'
        type: 'home'
    # address schemas
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 0bc30ff1-f7d7-4202-bce5-8a1c648fcb86
        street:
          type: string
          example: 'Rua 1'
        number:
          type: string
          example: '123'
        complement:
          type: string
          example: 'Casa 1'
        neighborhood:
          type: string
          example: 'Centro'
        city:
          type: string
          example: 'São Paulo'
        state:
          type: string
          example: 'SP'
        zip_code:
          type: string
          example: '12345-678'
        collaborator_id:
          type: string
          format: uuid
          example: 5da76fd7-e945-4c87-98ff-a73be856e16e
      example:
        id: 8822ab54-950e-4204-adba-a43fcb2903b0
        street: 'Rua 1'
        number: '123'
        complement: 'Casa 1'
        neighborhood: 'Centro'
        city: 'São Paulo'
        state: 'SP'
        zip_code: '12345-678'
        collaborator_id: b8e1db41-195b-46f1-9024-08915b6a6833
    StoreAddress:
      type: object
      properties:
        street:
          type: string
          example: 'Rua 1'
        number:
          type: string
          example: '1'
        complement:
          type: string
          example: 'Casa 1'
        neighborhood:
          type: string
          example: 'Bairro 1'
        city:
          type: string
          example: 'São Paulo'
        state:
          type: string
          example: 'SP'
        zip_code:
          type: string
          example: '12345-678'
      example:
        street: 'Rua 1'
        number: '1'
        complement: 'Casa 1'
        neighborhood: 'Bairro 1'
        city: 'São Paulo'
        state: 'SP'
        zip_code: '12345-678'

