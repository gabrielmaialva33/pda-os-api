openapi: 3.0.3
info:
  version: 1.0.0
  title: PDA API
  description: 'This is a simple ACL API built with NestJS'
  contact:
    name: Maia
    email: gabrielmaialva33@gmail.com
    url: github.com/gabrielmaialva33
servers:
  - url: http://127.0.0.1:3333
paths:
  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Use to request all users
      operationId: GetAllUsers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of users per page
        - in: query
          name: search
          schema:
            type: string
            example: 'John'
          description: Search by public fields
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort by field
        - in: query
          name: direction
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Create a user
      description: Use to create a user
      requestBody:
        description: User object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUser'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get a user by id
      description: Use to request a user
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

tags:
  - name: User
    description: Operations about users
components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '200':
      description: OK
    '401':
      description: Unauthorized
    '422':
      description: Unprocessable Entity
    '404':
      description: Not Found
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 961d77f4-458c-4add-b419-ba70f1b18297
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@pda.com
        user_name:
          type: string
          example: john
        password:
          type: string
          example: '123456'
        is_online:
          type: boolean
          example: false
      required:
        - first_name
        - last_name
        - email
        - user_name
        - password
      example:
        id: 961d77f4-458c-4add-b419-ba70f1b18297
        first_name: John
        last_name: Doe
        email: john@pda.com
        user_name: john
        password: '123456'

    StoreUser:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@pda.com
        user_name:
          type: string
          example: john
        password:
          type: string
          example: '123456'
      required:
        - first_name
        - last_name
        - email
        - user_name
        - password
      example:
        first_name: John
        last_name: Doe
        email: john@pda.com
        user_name: john
        password: '123456'
